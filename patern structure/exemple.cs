//les patterns de structure ou de structuration

//intro

//Les patterns de structuration permettent de faciliter 
//L'independance de l'interface de l'interface d'un objet et de son 
// implementation

//En fournissant les interfaces ce pattern permet 
//d'encapsuler la copmposition des objets

//cela augmente le niveau d'abstraction d'un systeme 
//donné un peu à la maniere des patterns de création 
//qui encapsulent la création d'objets.
//Ces patterns mettent en avant les interfaces

//exercice : Composition vs heritage en c#

//Composition     – Utilisé en injection de dépendance
//                -Les objets peuvent être composés au sein de plusieurs classes.

//Héritage        – Utilisé dans le polymorphisme
//                – Une classe ne peut hériter que d’une seule classe.

//Le pattern adapter

//le but de ce pattern est de convertr l'interface attendue 
//par des clientss afin qu'ils puissent travailler ensemble.
//En résumé, il permet de donner à une classe
//existante une nouvelle interface pour répondre 
//aux besoins d'un client.
